

// Como primer paso necesitarÃ¡s requerir Ã©l mÃ³dulo lecturaEscritura y asignarlo a una variable para poder utilizar sus 
// funcionalidades, ademÃ¡s de hacer la lectura del archivo departamentos.json, en detalle:
// Requerir mÃ³dulo lecturaEscritura y asignarlo a una variable llamada por ejemplo archivos, esta contendrÃ¡ los mÃ©todos 
// del mÃ³dulo requerido de ahora en mÃ¡s
// Leer Ã©l archivo departamentos.json utilizando la variable archivos creada anteriormente con Ã©l mÃ©todo adecuado y 
// asignar a una variable llamada arrayDepartamentos
// Comprobar los pasos anteriores imprimiendo la variable arrayDepartamentos. ejemplo : console.log(arrayDepartamentos)

let archivos = require("./lecturaEscritura")
let arrayDepartamentos = archivos.leerJson("departamentos")
// console.log(arrayDepartamentos)


// Crear un objeto literal, que podemos llamar inmobiliaria, serÃ¡ nuestra representaciÃ³n de la inmobiliaria 
// (valga la redundancia) con su datos (propiedades) y sus funcionalidades (mÃ©todos).

let inmobiliaria = {
    // A. Agregar una propiedad llamada departamentos que contenga Ã©l arrayDepartamentos obtenido en el punto anterior. 
    departamentos: arrayDepartamentos,
    // listarDepartamentos: function (array) {
    
    listarDepartamentos: function (array) {
        array.forEach(departamento => {
            let disponible = departamento.disponible === true? "disponible": "no disponible"
            console.log("id: " + departamento.id + 
            ",precio " + departamento.precioAlquiler + 
            ", estÃ¡ " + disponible +
             "," + departamento.ambientes + " ambientes"
             );
            });
        },
    //C
    // Agregar un mÃ©todo buscarPorId que permita buscar un departamento en funciÃ³n de su id.
    // Este mÃ©todo recibirÃ¡ por parÃ¡metro un number que representa Ã©l id del departamento a buscar
    // En caso de encontrar un departamento con Ã©l id buscado, devolverÃ¡ el objeto literal que lo representa.
    // En caso contrario devolverÃ¡ undefinded Recordemos que Javascript tiene un mÃ©todo para hacer 
    // justamente lo que necesitamos ðŸ˜‰.

    // buscarPorId: function (id) {
    //     let Buscador = this.departamentos.find(apartamento => apartamento.id === id
    //     )
    //     return Buscador
    // }

    buscarPorId: function (id) {  
        return this.departamentos.find(apartamento => apartamento.id == id)
    },

// Agregar un mÃ©todo departamentosNoDisponibles que permite filtrar departamentos cuando su propiedad 
// disponible sea igual a false, esto quiere decir que estÃ¡n alquilados.
// Este mÃ©todo devolverÃ¡ un array con todos los departamentos que cumplan la condiciÃ³n mencionada
// en caso de no encontrar ningÃºn	 que cumpla con la condiciÃ³n, devolverÃ¡ un array vacÃ­o
      
    departamentosNoDisponibles: function () {       
        let isntDisponible = this.departamentos.filter(apartamento => apartamento.disponible === false);
        return isntDisponible
},
//E
// Agregar un mÃ©todo departamentosDisponibles que permite filtrar departamentos cuando su propiedad 
// disponible sea igual a true.
// Este mÃ©todo devolverÃ¡ un array con todos los departamentos que cumplan la condiciÃ³n mencionada
// en caso de no encontrar ningÃºn	 que cumpla con la condiciÃ³n, devolverÃ¡ un array vacÃ­o

    departamentosDisponibles: function () { 
        let isDisponible = this.departamentos.filter(apartamento => apartamento.disponible === true)
        return isDisponible
    },
    //F
    // Agregar un mÃ©todo filtrarPorAmbientes que permite filtrar departamentos, siempre y cuando su 
    // propiedad ambientes sea mayor o igual a una cantidad enviada como argumento.
    // Este mÃ©todo recibirÃ¡ por parÃ¡metro un number que represente la cantidad de  ambientes mÃ­nimo.
    // Este mÃ©todo devolverÃ¡ un array con todos los departamentos que cumplan con la condiciÃ³n mencionada.
    // En caso de no encontrar ningÃºn departamento que cumpla con la condiciÃ³n, devolverÃ¡ un array vacÃ­o.

    filtrarPorAmbientes: function (numeroAmbientes) {
        let filterRoom = this.departamentos.filter(departamento => departamento.ambientes > numeroAmbientes)
        return filterRoom
    },

    //G
    // Agregar un mÃ©todo filtrarPorPrecio que permite filtrar departamentos, siempre y cuando 
    // su propiedad precioAlquiler sea menor o igual a Ã©l precio enviado como argumento.
    // Este mÃ©todo recibirÃ¡ por parÃ¡metro un number que represente Ã©l precioAlquiler mÃ¡ximo.
    // Este mÃ©todo devolverÃ¡ un array con todos los departamentos que cumplan con la condiciÃ³n mencionada.
    // En caso de no encontrar ningÃºn departamento que cumpla con la condiciÃ³n, devolverÃ¡ un array vacÃ­o.
    // Este mÃ©todo debe usar departamentosDisponibles, para buscar incluir solamente aquellos 
    // departamentos que estÃ©n disponibles.

    filtrarPorPrecio: function (PrecioMax) {
        let filterbyPrice = this.departamentosDisponibles().filter(departamento => departamento.precioAlquiler <= PrecioMax)
        return filterbyPrice
    },

    // Agregar un mÃ©todo rebajarPrecioAlquiler que modifique Ã©l valor de precioAlquiler de los departamentos No Alquilados.
    // Este mÃ©todo debe usar departamentosDisponibles, para buscar 
    // incluir solamente aquellos departamentos que estÃ©n disponibles, es decir, que no estÃ©n Alquilados.
    // Este mÃ©todo recibirÃ¡ por parÃ¡metro un number que represente Ã©l porcentaje que se desea rebajar a los departamentos 
    // no alquilados por ejemplo un 3%.
    // Este mÃ©todo devolverÃ¡ un array con todos los departamentos que sufrieron la modificaciÃ³n del precioAlquiler
    // Este mÃ©todo debe realizar una persistencia de informaciÃ³n, para esto utilizaremos Ã©l mÃ©todo escribirJson 
    // de nuestro objeto requerido en Ã©l primero punto. 
    // archivos.escribirJson('departamentos',this.departamentos)

    rebajarPrecioAlquiler: function (porcentaje) {
        
        let DptosDisponibles = this.departamentosDisponibles()
        console.table(DptosDisponibles)
        DptosDisponibles.map((departamento) => {
        departamento.precioAlquiler= departamento.precioAlquiler * (1-porcentaje/100);
        });
        archivos.escribirJson('departamentos',this.departamentos)
        return DptosDisponibles
    },

    // Agregar un mÃ©todo calcularRecaudaciÃ³n que calcule Ã©l valor que se depositarÃ¡ en caja tomando en 
    // cuenta Ã©l precioAlquiler de los departamentos Alquilados.
    // Este mÃ©todo devolverÃ¡ un valor que represente la recaudaciÃ³n total.
    // Este mÃ©todo debe usar departamentosNoDisponibles, para buscar incluir solamente aquellos departamentos 
    // que estÃ©n no disponibles, es decir, Alquilados.

    calcularRecaudacion: function () {
        let DptoAlquilados = this.departamentosNoDisponibles()
        let ResultadoRenta= DptoAlquilados.reduce((sumar, departamento) => sumar + departamento.precioAlquiler,0)
        return ResultadoRenta
    },

    // Agregar un mÃ©todo ordenarPorPrecio que ordene los departamentos de menor a mayor segÃºn su precio.
    // El mÃ©todo recibirÃ¡ como parÃ¡metro un array de departamentos. 
    // Este mÃ©todo devolverÃ¡ un array con todos los departamentos ordenados por precio.
    // Recordemos que Javascript tiene un mÃ©todo para hacer justamente lo que necesitamos ðŸ˜‰.

    ordenarPorPrecio: function (array) {
        let ordenar = array.sort((apartamento1,apartamento2) => (apartamento1.precioAlquiler - apartamento2.precioAlquiler))
        return ordenar
    }
};
//B
// inmobiliaria.listarDepartamentos(inmobiliaria.departamentos);
//C
// console.table(inmobiliaria.buscarPorId(3));
// console.table(inmobiliaria.buscarPorId(4));
//D
// console.table(inmobiliaria.departamentosNoDisponibles())
// //E
// console.log(inmobiliaria.departamentosDisponibles());
//F
// console.table(inmobiliaria.filtrarPorAmbientes(2))
//G
// console.table(inmobiliaria.filtrarPorPrecio(20000));
//H
// console.table(inmobiliaria.rebajarPrecioAlquiler(3))
//I
// console.table(inmobiliaria.calcularRecaudacion())
//J
console.table(inmobiliaria.ordenarPorPrecio(inmobiliaria.departamentos))



